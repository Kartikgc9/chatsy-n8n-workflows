{
  "name": "feedback-learning",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "feedback",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "ee49375f-a862-4113-b4f1-163a36e35a34",
      "name": "Webhook - Feedback",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -100,
        -40
      ],
      "webhookId": "feedback"
    },
    {
      "parameters": {
        "jsCode": "// Process feedback data for learning\nconst { suggestionUsed, originalMessage, contactHash, userFeedback, editedResponse } = $json.body;\n\n// Input validation\nif (!contactHash || !originalMessage) {\n  throw new Error('Missing required feedback fields');\n}\n\n// Determine feedback type\nlet feedbackType = 'neutral';\nlet accuracy = 0.5;\n\nif (suggestionUsed && !editedResponse) {\n  feedbackType = 'accepted';\n  accuracy = 1.0;\n} else if (editedResponse) {\n  feedbackType = 'edited';\n  accuracy = 0.7; // Partially correct\n} else if (userFeedback === 'rejected') {\n  feedbackType = 'rejected';\n  accuracy = 0.0;\n}\n\n// Extract style patterns from edited responses\nlet styleAnalysis = {};\nif (editedResponse && suggestionUsed) {\n  // Fixed emoji counting with proper regex\n  const emojiRegex = /[\\u{1F600}-\\u{1F64F}]|[\\u{1F300}-\\u{1F5FF}]|[\\u{1F680}-\\u{1F6FF}]|[\\u{1F1E0}-\\u{1F1FF}]|[\\u{2600}-\\u{26FF}]|[\\u{2700}-\\u{27BF}]/gu;\n  \n  const editedEmojis = (editedResponse.match(emojiRegex) || []).length;\n  const originalEmojis = (suggestionUsed.match(emojiRegex) || []).length;\n  \n  styleAnalysis = {\n    originalLength: suggestionUsed.length,\n    editedLength: editedResponse.length,\n    addedEmojis: editedEmojis - originalEmojis,\n    formalityShift: editedResponse.length > suggestionUsed.length ? 'more_formal' : 'less_formal'\n  };\n}\n\nreturn {\n  contactHash,\n  originalMessage,\n  suggestionUsed,\n  editedResponse,\n  feedbackType,\n  accuracy,\n  styleAnalysis,\n  timestamp: new Date().toISOString(),\n  userFeedback\n};"
      },
      "id": "4a6b6108-3fe6-4366-b2ea-e15a723f65f1",
      "name": "Feedback Data Processing",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        120,
        -40
      ]
    },
    {
      "parameters": {
        "jsCode": "// Simulate profile update logic (in real implementation, this would update a database)\nconst feedbackData = $json;\n\n// Create profile update recommendations\nlet profileUpdates = {\n  contactHash: feedbackData.contactHash,\n  updates: [],\n  confidence_adjustment: 0\n};\n\n// Analyze feedback and suggest profile adjustments\nswitch (feedbackData.feedbackType) {\n  case 'accepted':\n    profileUpdates.confidence_adjustment = +1;\n    profileUpdates.updates.push('Increase suggestion confidence for this contact');\n    break;\n    \n  case 'edited':\n    if (feedbackData.styleAnalysis.addedEmojis > 0) {\n      profileUpdates.updates.push('Increase emoji usage preference');\n    } else if (feedbackData.styleAnalysis.addedEmojis < 0) {\n      profileUpdates.updates.push('Decrease emoji usage preference');\n    }\n    \n    if (feedbackData.styleAnalysis.formalityShift === 'more_formal') {\n      profileUpdates.updates.push('Increase formality level');\n    } else if (feedbackData.styleAnalysis.formalityShift === 'less_formal') {\n      profileUpdates.updates.push('Decrease formality level');\n    }\n    break;\n    \n  case 'rejected':\n    profileUpdates.confidence_adjustment = -1;\n    profileUpdates.updates.push('Review and adjust suggestion strategy for this contact');\n    break;\n}\n\n// Log successful interaction pattern\nprofileUpdates.interaction_pattern = {\n  message_type: feedbackData.originalMessage.length > 100 ? 'long' : 'short',\n  response_style: feedbackData.suggestionUsed ? 'ai_assisted' : 'manual',\n  success_rate: feedbackData.accuracy\n};\n\nreturn {\n  ...feedbackData,\n  profileUpdates,\n  processed: true\n};"
      },
      "id": "b3d00a7b-5ab5-45bf-8dd4-c57a75e1b7a0",
      "name": "Profile Update Logic",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        340,
        -40
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify({\n  status: 'success',\n  message: 'Feedback processed successfully',\n  contactHash: $json.contactHash,\n  feedbackType: $json.feedbackType,\n  updatesApplied: $json.profileUpdates.updates.length,\n  timestamp: $json.timestamp\n}) }}",
        "options": {}
      },
      "id": "5b860337-1cf0-4373-8826-5c630ce9f325",
      "name": "Feedback Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        560,
        -40
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook - Feedback": {
      "main": [
        [
          {
            "node": "Feedback Data Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Feedback Data Processing": {
      "main": [
        [
          {
            "node": "Profile Update Logic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Profile Update Logic": {
      "main": [
        [
          {
            "node": "Feedback Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "5e799359-2622-48fd-8838-a247c8e1d03a",
  "meta": {
    "instanceId": "39ced514d9cc35d9ec49ced982170396ae1eb83133619d83ea9f92a29b6c93c7"
  },
  "id": "Yc44JQrQOQqe5kEJ",
  "tags": []
}