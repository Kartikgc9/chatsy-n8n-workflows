{
  "name": "AI-Generation",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "generate-response",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "e87aef50-3ccd-4950-b49f-cef2fe0b9389",
      "name": "Webhook - Generate Response",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -1000,
        -20
      ],
      "webhookId": "generate-response"
    },
    {
      "parameters": {
        "jsCode": "// Input validation and processing\nconst { message, contactHash, appPackage, userProfile } = $json.body;\n\n// Input validation\nif (!message || !contactHash) {\n  throw new Error('Missing required fields: message and contactHash are mandatory');\n}\n\n// Sanitize message (limit length, strip potential issues)\nconst sanitizedMessage = message.substring(0, 500).trim();\n\n// Default user profile if not provided\nconst profile = userProfile || {\n  formalityLevel: 5,\n  emojiUsage: 5,\n  messageLength: \"medium\",\n  relationship: \"acquaintance\"\n};\n\n// Extract app context\nconst appContext = {\n  isWhatsApp: appPackage.includes('whatsapp'),\n  isInstagram: appPackage.includes('instagram'),\n  isSMS: appPackage.includes('mms') || appPackage.includes('sms'),\n  isEmail: appPackage.includes('gmail') || appPackage.includes('email')\n};\n\nreturn {\n  sanitizedMessage,\n  contactHash,\n  appPackage,\n  userProfile: profile,\n  appContext,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "d11b8346-6883-4544-a11d-fc26a122c1e2",
      "name": "Input Validation & Processing",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -780,
        -20
      ]
    },
    {
      "parameters": {
        "jsCode": "// Context enrichment based on user profile and app context\nconst { sanitizedMessage, userProfile, appContext, contactHash } = $json;\n\n// Build personality context\nconst personalityPrompt = [];\n\n// Formality level context\nif (userProfile.formalityLevel >= 8) {\n  personalityPrompt.push(\"Use formal, professional language\");\n} else if (userProfile.formalityLevel <= 3) {\n  personalityPrompt.push(\"Use casual, informal language\");\n} else {\n  personalityPrompt.push(\"Use moderately casual language\");\n}\n\n// Emoji usage context\nif (userProfile.emojiUsage >= 7) {\n  personalityPrompt.push(\"Include relevant emojis\");\n} else if (userProfile.emojiUsage <= 3) {\n  personalityPrompt.push(\"Avoid emojis, use text only\");\n} else {\n  personalityPrompt.push(\"Use emojis sparingly\");\n}\n\n// Message length preference\nswitch (userProfile.messageLength) {\n  case \"short\":\n    personalityPrompt.push(\"Keep responses brief (1-5 words)\");\n    break;\n  case \"long\":\n    personalityPrompt.push(\"Provide detailed responses\");\n    break;\n  default:\n    personalityPrompt.push(\"Use moderate length responses\");\n}\n\n// Relationship context\nswitch (userProfile.relationship) {\n  case \"family\":\n    personalityPrompt.push(\"Use warm, familiar tone\");\n    break;\n  case \"friend\":\n    personalityPrompt.push(\"Use friendly, relaxed tone\");\n    break;\n  case \"colleague\":\n    personalityPrompt.push(\"Use professional but friendly tone\");\n    break;\n  default:\n    personalityPrompt.push(\"Use polite, neutral tone\");\n}\n\n// App-specific context\nlet appSpecificContext = \"\";\nif (appContext.isWhatsApp) {\n  appSpecificContext = \"This is for WhatsApp messaging\";\n} else if (appContext.isInstagram) {\n  appSpecificContext = \"This is for Instagram direct messaging\";\n} else if (appContext.isSMS) {\n  appSpecificContext = \"This is for SMS text messaging\";\n} else if (appContext.isEmail) {\n  appSpecificContext = \"This is for email communication\";\n}\n\n// Build final prompt\nconst contextualPrompt = `${appSpecificContext}. ${personalityPrompt.join(\". \")}. Generate 3 different reply options for the message: \"${sanitizedMessage}\"`;\n\nreturn {\n  ...($json),\n  contextualPrompt,\n  personalityContext: personalityPrompt\n};"
      },
      "id": "cc141898-40d2-4474-b85d-2a0802b5b38d",
      "name": "Context Enrichment",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -560,
        -20
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "huggingFaceApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "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"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "inputs",
              "value": "={{ $json.contextualPrompt }}"
            },
            {
              "name": "parameters",
              "value": "{   \"max_new_tokens\": 50,   \"temperature\": 0.7,   \"num_return_sequences\": 3,   \"do_sample\": true,   \"pad_token_id\": 50256 }"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "2908b166-2fa5-4846-b330-3e01b31b30b6",
      "name": "Hugging Face API Call",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -340,
        -20
      ],
      "credentials": {
        "huggingFaceApi": {
          "id": "ByuWKjteqwvN0RhS",
          "name": "HuggingFaceApi account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Process AI API response and format for Android consumption\nconst inputData = $json;\nlet suggestions = [];\n\n// Safe extraction with fallbacks\nconst userProfile = inputData.userProfile || {\n  formalityLevel: 5,\n  emojiUsage: 5,\n  messageLength: \"medium\",\n  relationship: \"acquaintance\"\n};\nconst appContext = inputData.appContext || {};\n\n// Check if Hugging Face API succeeded\nif (inputData.body && Array.isArray(inputData.body)) {\n  // Extract suggestions from Hugging Face response\n  suggestions = inputData.body.map(item => {\n    if (typeof item === 'object' && item.generated_text) {\n      return item.generated_text.trim();\n    }\n    return item.toString().trim();\n  }).filter(text => text && text.length > 0);\n}\n\n// If AI failed or no suggestions, use fallbacks\nif (suggestions.length === 0) {\n  console.log('AI API failed, using fallback suggestions');\n  \n  // Generate fallback suggestions based on user profile\n  if (userProfile.formalityLevel >= 8) {\n    suggestions = [\n      \"Thank you for the information.\",\n      \"I acknowledge your message.\",\n      \"I will respond accordingly.\"\n    ];\n  } else if (userProfile.formalityLevel <= 2) {\n    if (userProfile.emojiUsage >= 7) {\n      suggestions = [\n        \"Cool, thanks! üòä\",\n        \"Awesome! ‚ú®\",\n        \"Sweet, got it! üëç\"\n      ];\n    } else {\n      suggestions = [\n        \"Cool, thanks!\",\n        \"Awesome!\",\n        \"Got it!\"\n      ];\n    }\n  } else {\n    suggestions = [\n      \"Thanks for letting me know!\",\n      \"Got it!\",\n      \"I'll get back to you soon\"\n    ];\n  }\n}\n\n// Ensure we have exactly 3 suggestions\nwhile (suggestions.length < 3) {\n  suggestions.push(\"Thanks!\");\n}\nsuggestions = suggestions.slice(0, 3);\n\n// Clean up suggestions\nsuggestions = suggestions.map(suggestion => {\n  // Remove any prefixes from the original message\n  let cleaned = suggestion.replace(/^.*?: /, '').trim();\n  \n  // Ensure proper capitalization\n  if (cleaned.length > 0) {\n    cleaned = cleaned.charAt(0).toUpperCase() + cleaned.slice(1);\n  }\n  \n  // Add period if missing and it's a statement\n  if (cleaned.length > 5 && !cleaned.match(/[.!?]$/)) {\n    cleaned += '.';\n  }\n  \n  return cleaned;\n});\n\nreturn {\n  suggestions,\n  contactHash: inputData.contactHash || \"unknown\",\n  model: \"DialoGPT-medium\",\n  processingTime: inputData.timestamp ? Date.now() - new Date(inputData.timestamp).getTime() : 0,\n  fallbackUsed: !inputData.body || !Array.isArray(inputData.body),\n  userProfile: userProfile,\n  appContext: appContext\n};"
      },
      "id": "c5296fbb-6b96-47cc-b194-7f7fcfdff223",
      "name": "Response Processing & Formatting",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -120,
        -20
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify({\n  suggestions: $json.suggestions,\n  contactHash: $json.contactHash,\n  model: $json.model,\n  processingTime: $json.processingTime,\n  fallbackUsed: $json.fallbackUsed,\n  timestamp: new Date().toISOString()\n}) }}",
        "options": {}
      },
      "id": "1100b42e-3fb6-4fff-b043-cac932d3efa3",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        120,
        -20
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api-inference.huggingface.co/models/facebook/blenderbot-400M-distill",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "huggingFaceApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "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"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "inputs",
              "value": "={{ $json.contextualPrompt }}"
            },
            {
              "name": "parameters",
              "value": "{       \"max_length\": 50,       \"temperature\": 0.8,       \"do_sample\": true     }"
            }
          ]
        },
        "options": {
          "timeout": 8000
        }
      },
      "id": "6aef157e-efdf-4d1b-8214-c34a58ba11ec",
      "name": "Fallback AI API (BlenderBot)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -100,
        200
      ],
      "credentials": {
        "huggingFaceApi": {
          "id": "ByuWKjteqwvN0RhS",
          "name": "HuggingFaceApi account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// MCP Integration Handler\n// This node prepares data for MCP (Model Context Protocol) integration\nconst inputData = $json;\n\n// MCP-compatible context structure\nconst mcpContext = {\n  message_context: {\n    original_message: inputData.sanitizedMessage,\n    sender_hash: inputData.contactHash,\n    app_context: inputData.appContext,\n    timestamp: inputData.timestamp\n  },\n  user_profile: {\n    formality_level: inputData.userProfile.formalityLevel,\n    emoji_usage: inputData.userProfile.emojiUsage,\n    message_length_pref: inputData.userProfile.messageLength,\n    relationship_type: inputData.userProfile.relationship\n  },\n  generation_params: {\n    num_suggestions: 3,\n    max_length: 50,\n    temperature: 0.7,\n    context_window: 512\n  },\n  privacy_constraints: {\n    pii_stripped: true,\n    contact_anonymized: true,\n    local_processing_preferred: true\n  }\n};\n\n// MCP protocol metadata\nconst mcpMetadata = {\n  protocol_version: '1.0',\n  client_id: 'chatsy-android',\n  request_id: `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n  capabilities: [\n    'text_generation',\n    'context_awareness',\n    'privacy_preservation',\n    'multi_provider_fallback'\n  ]\n};\n\nreturn {\n  ...inputData,\n  mcp_context: mcpContext,\n  mcp_metadata: mcpMetadata,\n  mcp_ready: true\n};"
      },
      "id": "a0567bbf-49f0-4f91-a5e6-13ac96cd233e",
      "name": "MCP Integration Handler",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -560,
        -180
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook - Generate Response": {
      "main": [
        [
          {
            "node": "Input Validation & Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input Validation & Processing": {
      "main": [
        [
          {
            "node": "Context Enrichment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Context Enrichment": {
      "main": [
        [
          {
            "node": "MCP Integration Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Hugging Face API Call": {
      "main": [
        [
          {
            "node": "Response Processing & Formatting",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fallback AI API (BlenderBot)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Response Processing & Formatting": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fallback AI API (BlenderBot)": {
      "main": [
        [
          {
            "node": "Response Processing & Formatting",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MCP Integration Handler": {
      "main": [
        [
          {
            "node": "Hugging Face API Call",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "c997a7fa-d1f8-48f0-8f7f-14808851e9d4",
  "meta": {
    "instanceId": "39ced514d9cc35d9ec49ced982170396ae1eb83133619d83ea9f92a29b6c93c7"
  },
  "id": "5F6dHbL9TWmv301d",
  "tags": []
}